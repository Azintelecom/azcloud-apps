#!/usr/bin/env bash

set_proxy()
{
  export http_proxy="$PROXY"
  export https_proxy="$PROXY"
  export HTTP_PROXY="$PROXY"
  export HTTPS_PROXY="$PROXY"
}

unset_proxy()
{
  unset http_proxy
  unset https_proxy
  unset HTTP_PROXY
  unset HTTPS_PROXY
}

get_proxy()
{
  [ -f "$AZCLOUD_APPS_PROXY" ] || { echo; return; }
  cat "$AZCLOUD_APPS_PROXY"
}

fatal()
{
  echo "ERROR: $*" >&2
  exit 1
}

_get_nodes_addresses_from_userdata()
{
  local addresses;
  while IFS='' read -r a; do addresses+=("$a"); done < <(get_app_config | jq -r '.vms[].net[0].address')
  [ -z "${addresses[*]}" ] && fatal "Could not get nodes addresses"
  for a in  ${addresses[*]}; do
    printf "%s\\n" "$a"
  done
}

_get_nodes_addresses_from_avahi()
{
  local play_id; play_id="$(get_play_id)"

  systemctl restart avahi-daemon

  avahi-browse -actrp \
    | grep ^= \
    | grep -E "${play_id}" \
    | awk -F';' '{print $8}' \
    | sort -V
}

_get_nodes_count_from_userdata()
{
  get_app_config | jq -r '.vms | length'
}

_get_nodes_addresses()
{
  local temp_file; temp_file="$(mktemp /tmp/XXXXXXXXXXXXX)"

  while IFS='' read -r node; do
    run_on_node "$node" "hostname -i | awk '{print \$NF}'" 2>/dev/null >> "$temp_file" &
  done <<< "$(_get_address_range)"

  cat "$temp_file"
  #rm -rf "$temp_file"
  #if command -v avahi-browse >& /dev/null; then
  #  until [[ $(_get_nodes_addresses_from_avahi 2>/dev/null | wc -l) -eq $config_nodes ]]; do
  #    _get_nodes_addresses_from_avahi
  #    avahi-browse -actrp
  #    systemctl status avahi-daemon >> /tmp/a
  #    sleep 5
  #    continue
  #  done
  #  _get_nodes_addresses_from_avahi
  #else
  #  _get_nodes_addresses_from_userdata
  #fi
}

get_play_addresses()
{
  local play_id; play_id="$(get_play_id)"
  while read -r node; do
    echo "$node"
  done < <(grep "$play_id" /etc/hosts | awk '{print $1}')
}

get_play_id()
{
  local play_id
  if [ -f "$AZCLOUD_APPS_PLAYID" ]; then
    cat "$AZCLOUD_APPS_PLAYID"
  else
    play_id="$(hostname -f)"
    play_id="${play_id#*.}"
    play_id="${play_id%.*}"
    echo "$play_id"
  fi
}

run_on_node()
{
  local node; node="$1"; shift
  local comm; comm="$*"
  ssh=();ssh=(ssh)
  ssh+=(-o "ControlPath=~/.ssh/cm-%r@%h:%p")
  ssh+=(-o "ControlMaster=auto")
  ssh+=(-o "ControlPersist=10m")
  ssh+=(-o "BatchMode=yes")
  ssh+=(-o "PreferredAuthentications=publickey")
  ssh+=(-o "PubkeyAuthentication=yes")
  ssh+=(-o "StrictHostKeyChecking=no")
  ssh+=(-o "ConnectTimeout=1")
  ssh+=(-o "ConnectionAttempts=1")
  ssh+=(root@"$node" "$comm")
  "${ssh[@]}"
}

update_host_file()
{
  echo "# azcloud-apps" >> /etc/hosts
  for addr in $(_get_nodes_addresses); do
    hostname="$(run_on_node "$addr" 'hostname -f; hostname -s')"
    # shellcheck disable=SC2086
    echo "$addr" $hostname >> /etc/hosts
  done
}

is_it_first()
{
  local node; node="$1"; shift
  local first; first=1
  local address
  address="$(node_to_address "$node")"
  local first_address
  first_address="$(_get_first_node)"
  if [ "$address" = "$first_address" ]; then
    first=0
  fi
  return $first
}

_get_address()
{
  local node; node="$1"
  getent hosts "$node" | awk '{print $1}'
}

get_my_address()
{
  local node; node="$(hostname -s)"
  local my_address
  my_address="$(getent hosts "$node" | awk '{print $1}')"
  echo "$my_address"
}

get_play_nodes()
{
  local play_id; play_id="$(get_play_id)"
  while read -r node; do
    echo "$node"
  done < <(grep "$play_id" /etc/hosts | awk '{print $NF}')

}

node_to_address()
{
  local node; node="$1"; shift
  local address
  address="$(_get_address "$node")"
  echo "$address"
}

get_app_config()
{ 
  [ -f "$AZCLOUD_APPS_CONFIG" ] || { echo; return; } 
  cat "$AZCLOUD_APPS_CONFIG"
}

_get_default_address()
{
  local address;
  address="$(ip route get 1.1.1.1 | grep dev | awk '{print $7}')"
  [ -z "$address" ] && fatal "Could not get default address"
  echo "$address"
}

_get_default_iface()
{
  local iface;
  iface="$(ip route get 1.1.1.1 | grep dev | awk '{print $5}')"
  [ -z "$iface" ] && fatal "Could not get default interface"
  echo "$iface"
}

_get_default_address_full()
{
  local iface; iface="$(_get_default_iface)"
  local address
  address="$(ip addr sh "$iface" scope global | awk '/inet/{print $2}')"
  [ -z "$address" ] && fatal "Could not get default full address"
  echo "$address"
}
  
_get_address_range()
{
  local address; address="$(_get_default_address_full)"
  nmap -sL "$address" \
    | awk '/Nmap scan report/{print $NF}' \
    | sed 's@(@@g; s@)@@g' 
}

_get_first_node()
{
  (
    for a in $(_get_nodes_addresses); do
      echo "$a"
    done
  ) | sort -V | head -n1
}

