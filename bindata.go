package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5f\x4f\xdb\x3e\x14\x7d\xf7\xa7\x38\x98\x50\xb5\xfc\x54\xdc\x22\x5e\x7e\xaa\x5a\x89\x75\x48\x3c\x6c\x2a\xa2\x42\xda\x06\xc8\x32\xb1\xb3\x58\x33\xb6\x15\x27\xac\x50\xf2\xdd\xa7\x38\xa5\xa1\xaa\x36\xf1\x76\x7d\xef\xf1\x3d\x7f\xee\xe1\x01\xab\x42\xc1\x1e\xb4\x65\xca\x3e\xe1\x41\x84\x9c\x10\xe3\x84\xe4\x8f\x4e\x56\x46\xf5\x07\x64\x4d\x00\xe3\x52\x61\x20\xbc\xe7\x5e\x94\xf9\x64\x5b\x4d\x69\x32\xa6\x04\x38\x44\xc8\x95\x31\x69\xae\xd2\x5f\x90\x3a\x88\x07\xa3\xa6\xcb\xf9\xe9\xe8\xec\x8c\x00\x99\x2b\xd0\xae\x83\xb6\x48\xfa\x99\xb6\x12\x34\x79\x5b\x42\x31\x2c\x9f\xbd\x42\x86\x03\x0c\xad\x78\x54\xb8\x3b\x3e\x09\xf9\xdd\xf1\x60\x02\xe9\x08\xf0\xd7\xfd\xe3\xd1\xff\xa3\x38\x0f\xae\x2a\x52\x05\x9a\xb4\x34\x8d\x24\xe9\xac\x22\x35\x21\x8f\x42\xdb\x8d\x8b\xa0\x4a\x0c\x57\x7b\x76\x62\x21\x75\xd1\x36\x0a\xb7\x7a\x46\x51\xd9\x4d\x00\x84\x60\xd7\xed\x04\xb7\x18\xbe\xec\xc8\xbf\x47\xaf\x87\x35\x54\x9a\x3b\x50\xe1\x3d\xac\x2b\x91\xb9\xca\x4a\x3a\x81\x5a\xe9\x12\xe3\x09\xea\xcd\x22\xa9\x8b\x29\x4d\xfa\x48\x9b\x08\xfa\x90\xba\x88\x96\x69\xb2\xfe\x74\xbe\xbc\xe4\xcb\xc5\xcd\xf5\xfc\xe2\x76\x74\x5f\x53\x0c\x28\x66\x3d\x30\xa9\x9e\x98\xad\x8c\x69\x58\xfc\x6f\x89\x01\xdd\x59\xb5\xde\x94\x35\x13\x2f\xa9\x71\x95\xe4\xc2\xfb\x40\xa3\xcd\xed\x1d\xf1\x0e\x47\x59\xdb\x0b\x8c\x3f\x89\x42\x37\x59\x86\x0f\xa1\xb3\xca\xa6\xa5\x76\x36\x6c\x43\x69\xc2\x6a\xdc\xa4\xa2\xdc\x24\x22\x75\x41\xd9\x49\x1c\x44\x9d\x6a\xe5\x5d\x51\xe2\xea\x7a\xf1\xed\xfb\x9b\xd8\x38\xad\x69\x7b\x91\xf6\xd5\xd6\x95\xe7\x52\x79\x65\xa5\xb2\xa9\x56\x01\xaf\xaf\xc8\x44\x29\x0c\xe8\xdc\x55\x46\xc6\x5c\x23\x0c\xef\x61\x94\x7c\x44\xfd\x1b\xb7\x28\xf3\x48\xdd\x9d\x78\xda\x4d\x18\x63\x8c\xd7\x93\xdd\x61\xf7\x60\xec\x3f\xc6\x6b\xb2\x15\xdb\x76\xbb\x14\x1b\xe6\x0e\x7d\x74\xc4\x8f\x6b\xfa\x0f\x13\xdb\x7f\xd1\xc1\xf9\x8f\xf9\x97\xc5\xcd\x67\x7e\x7e\x75\xb5\xe4\x97\x8b\xaf\x17\xd3\x2e\xd1\x2e\xc8\x3d\x54\xbc\xc5\x4b\x73\x72\x4e\x93\x8e\x9c\x62\x36\x03\x4d\xf6\xe0\x94\x09\xef\x4f\x8c\xfb\x89\xd3\x59\x6f\x4c\x6a\xf2\x27\x00\x00\xff\xff\x0a\xce\xad\x76\x02\x04\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
