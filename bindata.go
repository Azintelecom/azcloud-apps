package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x53\xdb\x38\x14\x7d\xd7\xaf\x38\x55\x5c\xf2\xd1\x31\x82\x4e\x5f\xb6\xc1\xec\xb2\x01\xb6\x99\xa1\x84\x21\xcb\xcc\x76\xf9\xf0\x08\x4b\xc1\x9e\x1a\xd9\x23\xcb\x81\x92\xf8\xbf\xef\xc8\x72\xbe\x08\x9d\xee\xe4\x45\xf2\xbd\x39\xf7\x9c\x73\xef\x55\xeb\x1d\x2b\x0b\xcd\xee\x13\xc5\xa4\x9a\xe2\x9e\x17\x31\x21\x69\xc6\x45\xf8\x98\x89\x32\x95\x9d\x2e\x99\x11\x20\xcd\x22\x9e\x82\xe7\x79\x98\x73\x13\xf7\x97\xa7\x80\x7a\xfb\x94\x00\x2d\x14\xb1\x4c\xd3\x28\x96\xd1\x77\x88\xa4\xe0\xf7\xa9\x0c\xc6\x83\x8f\x7b\x9f\x3e\x11\x60\x92\x69\x38\x38\x24\x0a\x5e\x67\x92\x28\x01\xea\x2d\x40\x28\x7c\xf3\x23\x97\x98\xe0\x1d\x7c\xc5\x1f\x25\x6e\x7a\xbb\x45\x7c\xd3\xeb\xf6\x21\x32\x02\xfc\x14\x7f\x7f\xef\xb7\xbd\x3a\x5e\x64\xa5\x8e\x24\xa8\xe7\xca\x58\x4a\x22\x53\x92\x54\x84\x3c\xf2\x44\x35\x2a\x0a\x69\xe0\x3f\x6f\xc9\xa9\x0f\x22\xd1\xee\x83\xce\x9e\x7f\x40\x97\xaa\x31\x80\x10\x6c\xaa\xed\xe3\x1a\xfe\xcb\x06\xfd\x5b\xec\xec\x60\x06\x19\xc5\x19\x28\xcf\x73\xa8\xcc\x60\x92\x95\x4a\xd0\x3e\xe4\x73\x62\xb0\xdf\x47\xd5\x00\x89\x44\x07\xd4\xeb\x20\xb2\x16\x74\x20\x12\x5d\x4b\xa6\xde\xec\xcf\xa3\xf1\x97\x70\x3c\xba\xba\x1c\x9c\x5c\xef\xdd\x56\x14\x5d\x8a\xc3\x1d\x30\x21\xa7\x4c\x95\x69\x6a\xab\xe4\x4f\x02\x5d\xba\x01\x35\x6b\x8e\x15\xe3\x2f\x51\x9a\x95\x22\xe4\x79\x5e\xd0\x5a\xe6\xb2\x8f\x58\xcb\xa3\xcc\x7d\x2b\x58\x38\xe5\x3a\xb1\x5e\x16\xff\x2b\x7b\x52\xaa\xc8\x24\x99\x2a\x96\xa6\x58\xb3\xac\x9a\x88\x9b\xc6\x11\x91\x68\xca\x76\xeb\x40\xcd\x53\x3e\xe7\x99\x36\xb8\xb8\x1c\xfd\xf3\x6d\x41\xb6\x8e\x56\xd4\x75\xc4\xdd\x2c\xe2\xd1\xbf\x83\xb3\xd1\xd5\x71\x78\x74\x71\x31\x0e\x8f\x87\xe3\xbf\x2f\x2d\xf4\x83\x34\xa1\x48\x0a\xa3\x93\xfb\xd2\x16\x0f\xad\x5d\xeb\xd0\xdb\x7f\x23\x58\xf4\x68\x3b\xd6\x74\x6b\xc2\x0d\x4f\x41\x07\x59\x99\x8a\xba\x5d\x42\x1a\x19\x19\xac\x57\x82\xad\x44\xb7\x98\x7d\x19\x7d\x3d\x09\x56\x62\x7f\x42\xc4\x66\x11\xa7\xb0\xcc\x43\x21\x73\xa9\x84\x54\x51\x22\x0b\xcc\xe7\xdb\xe5\xeb\x34\xac\xa7\xd5\x85\x7f\xd9\x93\x85\xa3\xdc\xc4\xb5\xa1\xab\xc1\x0d\x56\x11\xc6\x18\x0b\xab\xfe\x66\x70\x75\x61\xec\x03\x0b\x2b\x52\xaf\xb1\x96\x5c\xc0\x0a\xd8\x1d\x8c\xce\x4f\x87\x7f\xd9\x85\xfd\x76\xf4\xf5\x0c\x5c\x09\x68\xe9\x94\x12\x60\x39\x38\xa1\xc9\x42\xf7\x35\xe8\x74\x09\xf0\x14\x27\xa9\xc4\xf0\x74\x1c\xb4\xdb\x0e\xcd\xd7\x36\x7b\xb9\xca\x8d\x59\xd4\x9b\x4d\xb9\xfe\xbd\x26\xfd\x26\xdc\x87\xa0\xe3\x72\x2a\xda\x6d\xd6\x19\x07\x07\x07\x76\x69\x9c\xa7\x8e\xfc\x6a\x84\x2d\xe4\x4a\x54\xab\xd5\x0b\x2b\xda\xad\x5d\xb4\xef\xcf\x94\x6b\xab\xc5\x41\xbe\xae\x75\xfd\xc7\x6d\x45\x97\x0c\x9d\x84\x05\x77\x21\xf3\x70\x9d\x3f\x20\xa7\xb6\x77\xde\xac\x89\x34\x12\xd6\x95\x35\x91\xf7\xef\x83\x5e\x13\x5d\xa7\xff\xa0\x65\xde\x10\x71\x19\xf6\xb2\x35\x3c\x6f\xae\x29\x7b\x43\x23\xe6\xa8\x11\xfd\x29\xee\xd6\x51\xbb\xcb\x57\x70\xd5\xd9\xe1\xf9\xe0\xec\xea\xf8\x84\xbc\x16\xe9\xf0\x96\x1a\x7f\x31\x76\xec\xf5\x3b\xbb\xa1\xcc\x1f\xea\x18\xf4\xae\x85\x5e\x53\xed\x33\x7d\x73\x76\x31\x07\x7f\xfa\x0e\xff\xf4\x33\xda\xb3\x5c\x27\xca\xc0\x3b\x3f\xad\xda\x98\xc3\x68\xb4\xed\xef\x46\xd9\x5b\x61\x5d\xf5\x4b\x7b\x92\x02\x6d\x76\xe7\x31\xd1\x76\x9d\xe5\x2f\xf6\xad\x0b\xa9\xb7\x32\x85\xe2\xf0\xf0\xf5\xe6\x5b\x3f\x29\xe3\x79\xbe\x9b\x66\x0f\xf8\x78\xb8\xb3\x4f\x2a\x90\xff\x02\x00\x00\xff\xff\x8e\x85\x42\xd6\xfc\x06\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
