package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x5f\x6f\xda\x3e\x14\x7d\xf7\xa7\x38\x75\x53\x04\xfd\x89\x1a\xaa\xbe\xfc\x84\x40\xea\x68\xa5\x4e\xda\x44\x55\x56\x69\x5b\x5b\x59\x26\x36\x8d\xb5\xd4\xb6\x12\xa7\xa3\xd0\x7c\xf7\x29\x0e\x10\x10\xda\x9f\x37\xfb\xde\xe3\x73\xef\x39\xc7\xc7\x47\xac\xc8\x33\x36\xd3\x86\x29\xf3\x8a\x99\xc8\x13\x42\x52\x2b\x24\x7f\xb1\xb2\x48\x55\xbb\x43\x56\x04\x48\x6d\x2c\x52\x08\xe7\xb8\x13\x3e\x19\x6c\x4f\x43\x1a\xf5\x29\x01\x8e\x91\x27\x2a\x4d\xe3\x44\xc5\x3f\x20\x75\x2e\x66\xa9\x1a\x4e\xc7\xe7\xbd\x8b\x0b\x02\xcc\x6d\x86\x9a\x0e\xda\x20\x6a\xcf\xb5\x91\xa0\xd1\x86\x84\xa2\xeb\xdf\x9c\xc2\x1c\x47\xe8\x1a\xf1\xa2\xf0\x78\x7a\x96\x27\x8f\xa7\x9d\x01\xa4\x25\xc0\x6f\xf9\xfb\xbd\xff\x7b\xa1\x9f\xdb\x22\x8b\x15\x68\x54\x8f\xa9\x56\x92\xd6\x28\x52\x12\xf2\x22\xb4\x59\xab\xc8\x95\x47\x77\x71\x20\x27\x1c\xa4\xce\xea\x42\x66\x17\x6f\xc8\x0a\xb3\x36\x80\x10\xec\xab\x1d\xe0\x01\xdd\xe5\xde\xfa\x4f\x68\xb5\xb0\x82\x8a\x13\x0b\x2a\x9c\x83\xb1\x1e\x73\x5b\x18\x49\x07\x50\x0b\xed\xd1\x1f\xa0\x5c\x13\x49\x9d\x0d\x69\xd4\x46\x5c\x59\xd0\x86\xd4\x59\x90\x4c\xa3\xd5\x87\xcb\xe9\x0d\x9f\x4e\xee\xef\xc6\xd7\x0f\xbd\xa7\x92\xa2\x43\x31\x6a\x81\x49\xf5\xca\x4c\x91\xa6\xd5\x14\xf7\x53\xa2\x43\xf7\xa8\x56\xeb\x63\xc9\xc4\x32\x4e\x6d\x21\xb9\x70\x2e\xa7\x41\xe6\x36\x47\xec\xe0\x28\xab\x6b\x39\xe3\xaf\x22\xd3\x95\x97\xf9\x3f\xa1\xe7\x85\x89\xbd\xb6\x26\xdf\x9a\x52\x99\x55\xa9\x89\x85\x5f\x3b\x22\x75\x46\xd9\x59\x68\x84\x3d\xd5\xc2\xd9\xcc\xe3\xf6\x6e\xf2\xf5\xdb\x66\xd9\xd0\x2d\x69\x9d\x48\x7d\xab\x18\xaf\x3e\x4e\xbf\xdc\x55\x6c\xcf\xca\x73\xa9\x73\x9f\xe9\x59\x51\xcd\xe3\x95\x43\xbb\x6c\x01\x49\xb0\x49\x22\x5c\xd7\x31\xcc\x85\x17\x29\xe8\xd8\x16\xa9\x0c\x39\x48\xe5\x55\xec\xb1\xcb\x87\x8a\x8f\x92\x7a\x7e\xe1\xb8\x54\x4e\x19\xa9\x4c\xac\x55\x8e\xf7\xf7\x43\x8e\x00\xc3\x2e\x2c\xbc\xfe\xab\x63\x1b\xbd\xc2\x27\x41\x6e\xf3\xad\x86\x4d\x87\x31\xc6\x78\x39\xd8\x6f\x36\x17\xc6\xfe\x63\xbc\x6c\x96\xad\xab\x4d\x72\xd5\xe4\x06\x7d\x72\xc2\x4f\x4b\xfa\x07\x11\xdb\x77\x41\xc1\xe5\xf7\xf1\xa7\xc9\xfd\x15\xbf\xbc\xbd\x9d\xf2\x9b\xc9\xe7\xeb\x61\x93\x62\x63\xf7\x01\x2a\xe4\xbf\xac\xbe\x19\xa7\x51\x33\x9c\x62\x34\x02\x8d\x0e\xe0\x94\x09\xe7\xce\x52\xfb\x8c\xf3\x51\xab\x4f\x4a\xf2\x2b\x00\x00\xff\xff\x19\x2e\x39\x29\x76\x04\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
