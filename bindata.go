package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x53\xdb\x38\x14\x7d\xd7\xaf\x38\x55\x5c\xf2\xd1\x09\x82\x4e\x5f\xb6\x69\xd8\x65\x03\x6c\x33\x43\x09\x43\x96\x99\xed\xf2\xe1\x11\x96\x82\x3d\x35\xb2\x47\xb6\x03\x25\xf1\x7f\xdf\x91\xe4\x7c\x91\x50\xe0\x61\x27\x2f\x92\xef\xcd\xb9\xf7\x9c\xa3\x2b\xd5\xde\xb1\x22\xd3\xec\x26\x52\x4c\xaa\x31\x6e\x78\x16\x12\x12\x27\x5c\xf8\x77\x89\x28\x62\xd9\x68\x92\x09\x01\xe2\x24\xe0\x31\x78\x9a\xfa\x29\xcf\xc3\xce\x7c\xd5\xa5\xde\x2e\x25\x40\x0d\x59\x28\xe3\x38\x08\x65\xf0\x03\x22\xca\xf8\x4d\x2c\xbb\xc3\xde\xc7\x9d\x4f\x9f\x08\x30\x4a\x34\x1c\x1c\x22\x05\xaf\x31\x8a\x94\x00\xf5\x66\x20\x14\xed\xfc\x67\x2a\x31\xc2\x3b\xb4\x15\xbf\x93\xb8\x6c\x6d\x67\xe1\x65\xab\xd9\x81\x48\x08\xf0\x2c\xfe\xee\xce\x6f\x3b\x36\x9e\x25\x85\x0e\x24\xa8\xe7\xca\x98\x96\x44\xa2\x24\x29\x09\xb9\xe3\x91\xaa\x58\x64\x32\x47\xfb\x61\x8d\x8e\x5d\x88\x48\xbb\x0f\x3a\x79\xf8\x09\x5d\xa8\x4a\x00\x42\xb0\xca\xb6\x83\x0b\xb4\x1f\x57\xda\xbf\xc2\xd6\x16\x26\x90\x41\x98\x80\xf2\x34\x85\x4a\x72\x8c\x92\x42\x09\xda\x81\x7c\x88\x72\xec\x76\x50\x56\x40\x22\xd2\x5d\xea\x35\x10\x18\x09\x1a\x10\x91\xb6\x94\xa9\x37\xf9\x73\x7f\xf8\xd5\x1f\x0e\xce\xcf\x7a\x87\x17\x3b\x57\x25\x45\x93\x62\x6f\x0b\x4c\xc8\x31\x53\x45\x1c\x9b\x2a\xe9\xbd\x40\x93\xae\x40\x4d\xaa\x65\xc9\xf8\x63\x10\x27\x85\xf0\x79\x9a\x66\xd4\xd2\x9c\xfb\x88\xa5\x3c\xca\xdc\xb7\x8c\xf9\x63\xae\x23\xa3\x65\xf6\xaa\xec\x51\xa1\x82\x3c\x4a\x54\x36\x17\xc5\x88\x65\xd8\x04\x3c\xaf\x14\x11\x91\xa6\x6c\xdb\x06\x6c\x9f\xf2\x21\x4d\x74\x8e\xd3\xb3\xc1\x3f\xdf\x67\xcd\xda\x68\x49\x9d\x23\x6e\x67\x10\xf7\xff\xed\x1d\x0f\xce\x0f\xfc\xfd\xd3\xd3\xa1\x7f\xd0\x1f\xfe\x7d\x66\xa0\x6f\x65\xee\x8b\x28\xcb\x75\x74\x53\x98\xe2\xbe\x91\x6b\x19\x7a\xfd\x6f\x04\x33\x8f\xd6\x63\x95\x5b\x23\x9e\xf3\x18\xb4\x97\x14\xb1\xb0\x76\x09\x99\xcb\x20\xc7\x72\x25\x98\x4a\x74\xad\xb3\xaf\x83\x6f\x87\xdd\x05\xd9\x67\x1a\x31\x59\xc4\x31\x2c\x52\x5f\xc8\x54\x2a\x21\x55\x10\xc9\x0c\xd3\xe9\x7a\x79\x9b\x86\xe5\x34\x5b\xf8\x45\x4f\x66\x8a\xf2\x3c\xb4\x82\xd6\x16\x27\xb7\xbb\x08\x31\xc6\x98\x5f\x76\xb0\x12\x5c\x6c\x18\xfb\xc0\xfc\x92\xd8\x39\xd6\x92\x0b\x18\x06\xdb\xbd\xc1\xc9\x51\xff\x2f\x33\xb1\xdf\xf7\xbf\x1d\x83\x2b\x01\x2d\x1d\x55\x93\x39\x3f\x3a\x7e\x9e\xf8\xee\x73\xb7\xd1\x34\x91\xfb\x30\x8a\x25\xfa\x47\xc3\x6e\xbd\xee\xf0\xda\x1a\x63\xae\xab\x69\xae\xcd\x05\xa3\xde\x64\xcc\xf5\xef\xae\x71\x60\x03\xe2\x87\x6e\xc3\x25\x95\xd4\x42\x9b\xa1\xc6\x97\x2f\x5f\xcc\xe8\x38\x65\x1d\x83\xc5\x41\x36\xa0\x0b\x66\xb5\x5a\xcb\x2f\x69\xd3\x6a\x59\x33\xd7\xd0\x98\x6b\xc3\xc8\x81\x3e\xad\x76\xf1\xc7\x55\x49\x17\x5d\x3a\x1e\x33\x02\x42\xa6\xfe\x0a\x09\x40\x8e\x8d\x89\xde\xa4\x0a\xcd\x78\x2c\xf3\xab\x42\xef\xdf\x77\x5b\xb3\xf0\x32\x87\x5b\x2d\xd3\xaa\x19\x97\x62\x36\x6b\xe7\x68\xe3\xc4\xb2\x0d\x44\x31\x85\x45\x6c\x8f\x71\xbd\x8c\x6a\xc7\xc5\x8a\xf7\x36\x93\x9f\xf5\xf8\x05\x8b\x37\x3a\xfc\x1a\x83\xdf\xea\xef\xcc\xdb\x37\x59\xfb\x6b\x67\x9f\x33\xf6\xd7\xbe\xfe\x4f\xb6\xbe\x60\xe9\x13\x47\xfb\x27\xbd\xe3\xf3\x83\x43\xf2\x94\xa0\xc3\x9a\xf3\x7b\xc5\xa5\xb2\xfa\x8c\xae\xd0\x6a\xf7\x75\x08\x7a\x5d\x43\xab\x2a\xf7\x99\x6e\x44\xc1\x14\xfc\xfe\x07\xda\x47\x9f\x51\x9f\xa4\x3a\x52\x39\xbc\x93\xa3\xb2\x8e\x29\x72\x8d\xba\xf9\x5d\x2a\xb3\xcb\x8c\xa4\xed\xc2\xac\xa4\x40\x9d\x5d\x7b\x4c\xd4\x2d\x3d\xf3\xca\x3c\x9a\xc7\xcc\xa7\xde\x42\x13\x8a\xbd\xbd\xa7\x57\xbb\x91\x93\x32\x9e\xa6\xdb\x71\x72\x8b\x8f\x7b\x5b\xbb\xa4\x24\xff\x05\x00\x00\xff\xff\x0c\x02\x48\xcf\xdc\x08\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
