package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x4f\xdb\x3c\x14\x7d\xf7\xaf\x38\x98\x50\xb5\x7c\x2a\x6e\x11\x2f\x9f\xaa\x56\x62\x05\x89\x49\x9b\x8a\xe8\x90\xb6\x01\xb2\xdc\xd8\x25\xd6\x82\x6d\x25\x0e\x2b\x94\xfc\xf7\xc9\x49\xdb\xb4\xab\xd8\xf6\x66\xfb\x5e\x9f\x73\xcf\x39\xf7\xf0\x80\x15\x79\xc6\x66\xda\x30\x65\x9e\x31\x13\x79\x42\x48\x6a\x85\xe4\x4f\x56\x16\xa9\x6a\x77\xc8\x92\x00\xa9\x8d\x45\x0a\xe1\x1c\x77\xc2\x27\x83\xcd\x69\x48\xa3\x3e\x25\xc0\x21\xf2\x44\xa5\x69\x9c\xa8\xf8\x07\xa4\xce\xc5\x2c\x55\xc3\xe9\xf8\xb4\x77\x76\x46\x80\xb9\xcd\x50\xc3\x41\x1b\x44\xed\xb9\x36\x12\x34\x5a\x83\x50\x74\xfd\x8b\x53\x98\xe3\x00\x5d\x23\x9e\x14\xee\x8f\x4f\xf2\xe4\xfe\xb8\x33\x80\xb4\x04\x78\x17\xbf\xdf\xfb\xbf\x57\xd5\x73\x5b\x64\xb1\x02\x8d\x6a\x9a\x30\x92\xb4\x46\x91\x92\x90\x27\xa1\xcd\x4a\x45\xae\x3c\xba\x8b\x3d\x39\xd5\x41\xea\xac\x7e\xc8\xec\xe2\x05\x59\x61\x56\x06\x10\x82\x5d\xb5\x03\xdc\xa1\xfb\xba\x33\xfe\x03\x5a\x2d\x2c\xa1\xe2\xc4\x82\x0a\xe7\x60\xac\xc7\xdc\x16\x46\xd2\x01\xd4\x42\x7b\xf4\x07\x28\x57\x40\x52\x67\x43\x1a\xb5\x11\x07\x0b\xda\x90\x3a\xab\x24\xd3\x68\xf9\xe1\x7c\x7a\xc5\xa7\x93\xdb\x9b\xf1\xe5\x5d\xef\xa1\xa4\xe8\x50\x8c\x5a\x60\x52\x3d\x33\x53\xa4\x69\x60\x71\x3f\x25\x3a\x74\x07\x6a\xb9\x3a\x96\x4c\xbc\xc6\xa9\x2d\x24\x17\xce\xe5\xb4\x92\xb9\xc9\x11\x5b\x7d\x94\xd5\x6f\x39\xe3\xcf\x22\xd3\xc1\xcb\xfc\x9f\xba\xe7\x85\x89\xbd\xb6\x26\xdf\x98\x12\xcc\x0a\x6a\x62\xe1\x57\x8e\x48\x9d\x51\x76\x52\x15\xaa\x39\xd5\xc2\xd9\xcc\xe3\xfa\x66\xf2\xf5\xdb\x7a\xd8\xaa\x5a\xd2\x3a\x91\xfa\x16\x10\xcf\xbf\x8f\x3f\x4d\x6e\x2f\xf8\xf9\xf5\xf5\x94\x5f\x7c\x9c\x7e\xb9\x09\xd0\x8f\xca\x73\xa9\x73\x9f\xe9\x59\x11\xc8\x79\xb0\x6b\x1b\x7a\xff\x1b\xc1\x3a\xa3\xfd\xda\x2a\xad\xb9\xf0\x22\x05\x1d\xdb\x22\x95\x55\x5c\x52\x79\x15\x7b\x6c\x33\x21\x30\x51\x52\x8f\x59\x38\x2e\x95\x53\x46\x2a\x13\x6b\x95\xe3\xed\x6d\x1f\xa3\x6a\xc3\x76\x5b\xf5\xfb\xaf\xc6\xae\x6d\x11\x3e\xa9\x5c\x69\xb6\x6f\xd8\x54\x18\x63\x8c\x97\x83\xdd\x62\x73\x61\xec\x3f\xc6\xcb\x66\xd8\xfa\xb5\x09\x38\x30\x37\xdd\x47\x47\xfc\xb8\xa4\x7f\x10\xb1\xf9\x47\xf7\x92\xb9\x9a\x7c\xbe\x1c\x36\x61\xbf\x13\x44\xe8\xaa\xd6\xe4\x35\x6c\x23\xa7\x51\x43\x4e\x31\x1a\xfd\x9e\x4d\x68\xa7\x4c\x38\x77\x92\xda\x47\x9c\x8e\x5a\x7d\x52\x92\x5f\x01\x00\x00\xff\xff\x72\xd4\xdb\x79\x9d\x04\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
