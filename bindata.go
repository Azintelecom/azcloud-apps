package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x61\x6f\xdb\x36\x10\xfd\xce\x5f\xf1\xca\xa8\xa9\xe5\xc2\xa1\x5d\xf4\xcb\xe0\xc8\x5b\xe6\x76\x68\x81\x0d\x0e\xe2\x15\xd8\x96\x66\x04\x2d\xd2\x11\x31\x45\x24\x28\xc9\x75\xe3\xe8\xbf\x0f\x94\x64\x4b\xae\x53\x6c\xdf\x48\xdd\xe9\xdd\x7b\xef\x78\x77\xf6\x82\x95\xb9\x63\x2b\x9d\x31\x95\x6d\xb0\x12\x79\x42\x48\x6a\x84\xe4\x0f\x46\x96\xa9\x1a\x84\x64\x47\x80\xd4\xc4\x22\x85\xb0\x96\x5b\x51\x24\xd3\xc3\x29\xa2\xc1\x84\x12\xe0\x0c\x79\xa2\xd2\x34\x4e\x54\xfc\x0f\xa4\xce\xc5\x2a\x55\xd1\x72\xfe\x66\xfc\xf6\x2d\x01\xd6\xc6\xa1\x81\x83\xce\x10\x0c\xd6\x3a\x93\xa0\xc1\x1e\x84\x62\x54\x7c\xb5\x0a\x6b\xbc\xc0\x28\x13\x0f\x0a\x9f\x87\x17\x79\xf2\x79\x18\x4e\x21\x0d\x01\xbe\x8b\x3f\x19\xff\x30\xae\xe3\xb9\x29\x5d\xac\x40\x83\xa6\x8c\xa7\x24\x4d\xa6\x48\x45\xc8\x83\xd0\x59\xab\x22\x57\x05\x46\xdb\x13\x39\xf5\x41\x6a\xd7\x7c\x70\x66\xfb\x15\xae\xcc\x5a\x03\x08\xc1\xb1\xda\x29\x6e\x31\x7a\x3c\xa2\x7f\x87\xf3\x73\xec\xa0\xe2\xc4\x80\x0a\x6b\x91\x99\x02\x6b\x53\x66\x92\x4e\xa1\xb6\xba\xc0\x64\x8a\xaa\x05\x92\xda\x45\x34\x18\x20\xf6\x16\x0c\x20\xb5\xab\x25\xd3\x60\xf7\xf3\xd5\xf2\x03\x5f\x2e\x3e\xdd\xcc\xdf\xdf\x8e\xef\x2a\x8a\x90\x62\x76\x0e\x26\xd5\x86\x65\x65\x9a\xfa\x2a\xf6\x8b\x44\x48\x8f\xa0\x76\xed\xb1\x62\xe2\x31\x4e\x4d\x29\xb9\xb0\x36\xa7\xb5\xcc\x43\x1f\xd1\xcb\xa3\xac\xf9\x96\x33\xbe\x11\x4e\x7b\x2f\xf3\xff\x95\xbd\x2e\xb3\xb8\xd0\x26\xcb\x0f\xa6\x78\xb3\xbc\x9a\x58\x14\xad\x23\x52\x3b\xca\x2e\xea\x40\xcd\x53\x6d\xad\x71\x05\xae\x6f\x16\x7f\xfc\xb9\x27\x5b\x47\x2b\xda\x74\xa4\xb9\x79\xc4\xab\xbf\xe6\xbf\x2e\x3e\xbd\xe3\x57\xd7\xd7\x4b\xfe\xee\xe3\xf2\xf7\x1b\x0f\x7d\xaf\x0a\x2e\x75\x5e\x38\xbd\x2a\x7d\x71\xee\xed\xea\x43\x9f\xfe\x46\xb0\xef\xd1\x69\xac\xed\xd6\x5a\x14\x22\x05\x9d\x9b\x32\x95\x75\xbb\xa4\x2a\x54\x5c\xa0\x5f\x09\xbe\x12\x3d\x61\xf6\x61\xf1\xdb\xfb\xa8\x13\xfb\x1d\x22\x3e\x8b\x34\x0a\x4b\xcb\xa5\xb2\x2a\x93\x2a\x8b\xb5\xca\xf1\xf4\x74\x5a\xbe\x4e\x43\x3f\xad\x2e\xfc\x9f\x3d\xd9\x3b\x2a\x8a\xa4\x36\xb4\x7b\xb8\x51\x17\x61\x8c\x31\x5e\x4d\x8f\x83\xdd\x85\xb1\xd7\x8c\x57\xa4\x1e\x63\xa7\x46\xad\x9a\xc3\xd3\x00\x41\x77\xe1\x85\xe1\x4d\x42\x34\x08\x09\xf0\x25\xd1\xa9\xc2\xc7\x5f\x96\xd1\xab\x57\x70\x4a\x48\x8c\x9c\xcf\x3e\x4c\x6e\x8b\x46\x83\xdd\x46\xb8\x1f\x6b\x8e\xcf\xc2\xbd\x8e\x06\x4d\x4e\x45\xc3\x76\x7a\x71\x79\x79\xe9\x67\xa4\xb1\xb0\xe1\xda\xbd\x58\x0f\xd9\x69\x38\x3b\x1b\xf2\x8a\x86\xb5\x69\x7e\xdd\x6c\x84\xf3\xbb\xa6\x81\xfc\xb6\xd6\xed\x4f\x77\x15\x3d\x30\x6c\x24\xec\xb9\x4b\x65\x79\x9f\x3f\xa0\x36\xbe\x55\xc1\xae\x8d\xb4\x12\xfa\xca\xda\xc8\xcb\x97\xd1\xb0\x8d\xf6\xe9\xdf\x3b\x65\x5b\x22\x4d\x86\xbf\x9c\xbc\x95\x67\xa7\x92\x3d\xa3\x11\x4f\xa8\x11\x47\x1b\xfc\xdd\x47\x0d\x0f\x4b\xcf\x0f\xe7\xa3\xdf\x01\x9c\x06\xdd\xdf\x14\xb3\xd9\xb7\x13\xe1\x0b\x53\x26\xac\xbd\x48\xcd\x3d\xde\xcc\xce\x27\xa4\x02\xf9\x37\x00\x00\xff\xff\xe9\xdd\x05\xf7\x14\x06\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
