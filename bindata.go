// Code generated by go-bindata.
// sources:
// modules/main
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modulesMain = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x5d\x4f\xdb\x3c\x18\xbd\xf7\xaf\x38\x98\x50\xb5\xbc\x2a\x6e\x11\x37\xaf\xa2\x54\x62\x1d\x12\x17\x9b\x8a\xa8\x90\xb6\x01\x8a\x4c\xec\x2c\xd6\x5c\xdb\xca\x47\x57\x28\xf9\xef\x53\x9c\xd0\xac\xaa\xd6\x3b\xdb\xcf\xf1\xf9\x7a\x4e\x4f\x58\x55\xe4\xec\x45\x19\x26\xcd\x1a\x2f\xbc\xc8\x08\xd1\x96\x8b\x78\x65\x45\xa5\xe5\x70\x44\xb6\x04\xd0\x36\xe1\x1a\xdc\xb9\xd8\xf1\x32\x0b\x77\xa7\x88\x06\x53\x4a\x80\x53\x14\x99\xd4\x3a\xc9\x64\xf2\x0b\x42\x15\xfc\x45\xcb\x68\x39\xbf\x9c\x5c\x5d\x11\x20\xb5\x39\x5a\x3a\x28\x83\x60\x98\x2a\x23\x40\x83\x0f\x12\x8a\x71\xf9\xea\x24\x52\x9c\x60\x6c\xf8\x4a\xe2\xe9\xfc\xa2\xc8\x9e\xce\x47\x21\x84\x25\xc0\x3f\xf9\xa7\x93\xff\x27\x7e\x5e\xd8\x2a\x4f\x24\x68\xd0\xca\x34\x96\x84\x35\x92\xd4\x84\xac\xb8\x32\x5d\x8a\x42\x96\x18\x6f\x0e\xe2\xf8\x83\x50\x79\xfb\x90\xdb\xcd\x2b\xf2\xca\x74\x05\x10\x82\xfd\xb4\x21\x1e\x31\x7e\xdb\xb3\xff\x8c\xc1\x00\x5b\xc8\x24\xb3\xa0\xdc\x39\x18\x5b\x22\xb5\x95\x11\x34\x84\xdc\xa8\x12\xd3\x10\x75\x47\x24\x54\x1e\xd1\x60\x88\xa4\xa9\x60\x08\xa1\x72\x1f\x99\x06\xdb\x4f\xd7\xcb\xdb\x78\xb9\x78\xb8\x9f\xdf\x3c\x4e\x9e\x6b\x8a\x11\xc5\x6c\x00\x26\xe4\x9a\x99\x4a\xeb\x46\xc5\xfd\x16\x18\x51\x1f\x61\xb7\xa3\xe6\x6f\xc7\x5c\x53\x16\xaf\x79\xae\x9a\x7e\x8a\xa3\xa8\xb4\x32\x49\xa9\xac\x29\x76\x01\x9b\xe0\x8d\xb3\x84\x97\x5d\x3a\xa1\x72\xca\x2e\xfc\xc0\x6b\xca\x8d\xb3\x79\x89\xbb\xfb\xc5\xb7\xef\x51\x47\xe7\xa7\x35\x6d\xdb\x6d\x6f\xed\xb9\x72\xb1\x90\x4e\x1a\x21\x4d\xa2\x64\x81\xf7\x77\xa4\xbc\xe4\x1a\x74\x6e\x2b\x2d\x7c\x47\x1e\x86\xbf\x61\x94\x1c\x73\xfd\xa1\xc9\xcb\xcc\x4b\xf6\x6b\x8a\xfa\x09\x63\x8c\xc5\x75\xb8\x3f\xec\x2f\x8c\xfd\xc7\xe2\x9a\xec\x4c\xb6\xaf\x7d\x6b\x8d\x62\x8f\x3e\x3b\x8b\xcf\x6b\x7a\xc4\xfc\xee\x9f\x77\x7e\xfd\x63\xfe\x65\xf1\xf0\x39\xbe\xbe\xbb\x5b\xc6\xb7\x8b\xaf\x37\x51\xdf\x64\x5f\xe0\x01\xca\xef\xe0\x8d\x3b\x57\xc4\x34\xe8\xc5\x29\x66\x33\xd0\xe0\x00\x4e\x19\x77\xee\x42\xdb\x9f\xb8\x9c\x0d\xa6\xa4\x26\x7f\x02\x00\x00\xff\xff\xf6\x33\x6f\xea\xc6\x03\x00\x00")

func modulesMainBytes() ([]byte, error) {
	return bindataRead(
		_modulesMain,
		"modules/main",
	)
}

func modulesMain() (*asset, error) {
	bytes, err := modulesMainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "modules/main", size: 966, mode: os.FileMode(436), modTime: time.Unix(1599029391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"modules/main": modulesMain,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"modules": &bintree{nil, map[string]*bintree{
		"main": &bintree{modulesMain, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

