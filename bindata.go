package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x4f\xdb\x3c\x14\x7d\xf7\xaf\x38\xb8\xa1\x6a\xf9\x54\xdc\x22\x5e\x3e\x55\xad\xc4\x3a\x24\x1e\x36\x15\x51\x21\x6d\x03\x64\x99\xd8\x5d\xac\x19\xdb\x8a\x13\x56\x28\xf9\xef\x53\x9c\xd0\x50\xa1\x4d\xbc\x5d\xdf\x73\x72\xcf\x3d\xe7\xa6\x77\xc0\xca\x90\xb3\x7b\x6d\x99\xb2\x8f\xb8\x17\x21\x23\xc4\x38\x21\xf9\x83\x93\xa5\x51\x83\x21\xd9\x12\xc0\xb8\x54\x18\x08\xef\xb9\x17\x45\x36\xdd\x55\x33\x9a\x4c\x28\x01\x7a\x08\x99\x32\x26\xcd\x54\xfa\x0b\x52\x07\x71\x6f\xd4\x6c\xb5\x38\x19\x9f\x9e\x12\x60\xed\x72\x34\xe3\xa0\x2d\x92\xc1\x5a\x5b\x09\x9a\xbc\x0e\xa1\x18\x15\x4f\x5e\x61\x8d\x03\x8c\xac\x78\x50\xb8\x3d\x3a\x0e\xd9\xed\xd1\x70\x0a\xe9\x08\xf0\xd7\xf9\x93\xf1\xff\xe3\x88\x07\x57\xe6\xa9\x02\x4d\x1a\x99\x7a\x25\xe9\xac\x22\x15\x21\x0f\x42\xdb\xd6\x45\x50\x05\x46\x9b\x77\x76\x62\x21\x75\xde\x34\x72\xb7\x79\x42\x5e\xda\x36\x00\x42\xb0\xef\x76\x8a\x1b\x8c\x9e\xf7\xd6\xbf\x43\xbf\x8f\x2d\x54\x9a\x39\x50\xe1\x3d\xac\x2b\xb0\x76\xa5\x95\x74\x0a\xb5\xd1\x05\x26\x53\x54\xed\x20\xa9\xf3\x19\x4d\x06\x48\xeb\x08\x06\x90\x3a\x8f\x96\x69\xb2\xfd\x74\xb6\xba\xe0\xab\xe5\xf5\xd5\xe2\xfc\x66\x7c\x57\x51\x0c\x29\xe6\x7d\x30\xa9\x1e\x99\x2d\x8d\xa9\x55\xfc\x6f\x89\x21\xdd\x1b\xb5\x6d\xcb\x8a\x89\xe7\xd4\xb8\x52\x72\xe1\x7d\xa0\xd1\xe6\xee\x8e\x78\xc3\xa3\xac\xe9\x05\xc6\x1f\x45\xae\xeb\x2c\xc3\x87\xd8\xeb\xd2\xa6\x85\x76\x36\xd4\xa1\xf4\x76\x69\xd5\x76\x52\x51\xb4\x91\x48\x9d\x53\x76\x1c\x81\xb8\x68\x4f\x6d\xbc\xcb\x0b\x5c\x5e\x2d\xbf\x7d\x7f\x5d\x37\xc2\x55\x84\x83\x2a\x9a\x67\x73\xa0\xd2\x73\xa9\xbc\xb2\x52\xd9\x54\xab\x80\x97\x17\xac\x45\x21\x0c\xe8\xc2\x95\x46\xc6\x68\x23\x0d\x6f\x69\x94\x7c\xc4\xc0\xab\xb8\x28\xb2\xa8\xdd\x5d\x79\xd6\x21\x8c\x31\xc6\xab\xe9\x3e\xd8\x3d\x18\xfb\x8f\xf1\x8a\xec\x96\x6d\xba\x5d\x90\xb5\x72\xc7\x3e\x3c\xe4\x47\x15\xfd\x87\x89\xdd\x77\xd1\xc1\xd9\x8f\xc5\x97\xe5\xf5\x67\x7e\x76\x79\xb9\xe2\x17\xcb\xaf\xe7\xb3\x2e\x53\x02\xb4\x49\xbe\x63\xc5\x7f\xf4\xb9\xbe\x3a\xa7\x49\x27\x4e\x31\x9f\x83\x26\xef\xe8\x94\x09\xef\x8f\x8d\xfb\x89\x93\x79\x7f\x42\x2a\xf2\x27\x00\x00\xff\xff\x98\x16\xf4\xca\x05\x04\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
