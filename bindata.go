// Code generated by go-bindata.
// sources:
// modules/main
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modulesMain = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5b\x4f\xdb\x30\x14\x7e\xf7\xaf\xf8\x38\x84\xaa\x65\x2a\x6e\x11\x2f\x53\xd5\x6a\xac\x43\xe2\x61\x53\x11\x15\xd2\x36\x40\x91\x89\x9d\xc5\x9a\xb1\xad\x5c\x58\xb9\xe4\xbf\x4f\x71\x42\x33\x84\xd6\x37\xc7\xe7\xf3\x77\x3b\xd9\xdf\xe3\x55\x91\xf3\x3b\x6d\xb9\xb2\x0f\xb8\x13\x45\xc6\x98\x71\x42\xc6\xf7\x4e\x56\x46\x0d\x47\xec\x99\x01\xc6\x25\xc2\x40\x78\x1f\x7b\x51\x66\xb3\xed\x69\x4e\xd1\x94\x18\xb0\x8f\x22\x53\xc6\x24\x99\x4a\x7e\x43\xea\x42\xdc\x19\x35\x5f\x2f\x8f\x27\x27\x27\x0c\x48\x5d\x8e\x96\x0e\xda\x22\x1a\xa6\xda\x4a\x50\xf4\x4a\x42\x18\x97\x8f\x5e\x21\xc5\x1e\xc6\x56\xdc\x2b\xdc\x1c\x1e\x15\xd9\xcd\xe1\x68\x06\xe9\x18\xf0\x5f\xfe\xe9\xe4\xe3\x24\xcc\x0b\x57\xe5\x89\x02\x45\xad\x4c\x63\x49\x3a\xab\x58\xcd\xd8\xbd\xd0\xb6\x4b\x51\xa8\x12\xe3\xcd\xbb\x38\xe1\x20\x75\xde\x5e\xe4\x6e\xf3\x88\xbc\xb2\x5d\x01\x8c\xe1\x6d\xda\x19\xae\x31\x7e\x7a\x63\xff\x16\x83\x01\x9e\xa1\x92\xcc\x81\x84\xf7\xb0\xae\x44\xea\x2a\x2b\x69\x06\xb5\xd1\x25\xa6\x33\xd4\x1d\x91\xd4\xf9\x9c\xa2\x21\x92\xa6\x82\x21\xa4\xce\x43\x64\x8a\x9e\x3f\x9f\xae\xcf\xe3\xf5\xea\xea\x72\x79\x76\x3d\xb9\xad\x09\x23\xc2\x62\x00\x2e\xd5\x03\xb7\x95\x31\x8d\x8a\xff\x23\x31\xa2\x10\x61\xbb\xa3\xe6\x6d\xc7\x5c\x13\x8f\x1f\x44\xae\x9b\x7e\x8a\x9d\xa8\xb4\xb2\x49\xa9\x9d\x2d\xb6\x01\x9b\xe0\x8d\xb3\x44\x94\x5d\x3a\xa9\x73\xe2\x47\x61\x10\x34\xd5\xc6\xbb\xbc\xc4\xc5\xe5\xea\xfb\x8f\x79\x47\x17\xa6\x35\xb5\xed\xb6\x5f\xed\xb9\xf2\xb1\x54\x5e\x59\xa9\x6c\xa2\x55\x81\x97\x17\xa4\xa2\x14\x06\xb4\x74\x95\x91\xa1\xa3\x00\xc3\xbf\x30\x62\xbb\x5c\xbf\x6a\x8a\x32\x0b\x92\xfd\x9a\xe6\xfd\x84\x73\xce\xe3\x7a\xf6\x76\xd8\x7f\x70\xfe\x81\xc7\x35\xdb\x9a\x6c\x6f\xfb\xd6\x1a\xc5\x1e\x7d\x70\x10\x1f\xd6\xb4\xc3\xfc\xf6\x5d\x70\x7e\xfa\x73\xf9\x75\x75\xf5\x25\x3e\xbd\xb8\x58\xc7\xe7\xab\x6f\x67\xf3\xbe\xc9\xbe\xc0\x77\xa8\xb0\x83\x27\xe1\x7d\x11\x53\xd4\x8b\x13\x16\x0b\x50\xf4\x0e\x4e\x5c\x78\x7f\x64\xdc\x2f\x1c\x2f\x06\xd3\xd7\x9f\x1c\x14\x7d\x22\xf6\x37\x00\x00\xff\xff\x6a\xff\x7c\x25\xd1\x03\x00\x00")

func modulesMainBytes() ([]byte, error) {
	return bindataRead(
		_modulesMain,
		"modules/main",
	)
}

func modulesMain() (*asset, error) {
	bytes, err := modulesMainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "modules/main", size: 977, mode: os.FileMode(436), modTime: time.Unix(1598997458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"modules/main": modulesMain,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"modules": &bintree{nil, map[string]*bintree{
		"main": &bintree{modulesMain, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

