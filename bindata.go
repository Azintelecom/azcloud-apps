package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x6f\xda\x3c\x14\x7d\xf7\xaf\x38\x35\x11\x82\x7e\xa2\x86\xaa\x2f\x9f\x10\x48\x1d\xad\xd4\x49\x9b\xa8\xca\x2a\x6d\x6b\x2b\xcb\xc4\xa6\xb1\x96\xda\x56\xe2\x74\xb4\x34\xff\x7d\x72\x02\x04\x86\xba\xed\xcd\xf6\xbd\x3e\xe7\x9e\x73\x6e\xeb\x88\x15\x79\xc6\xe6\xda\x30\x65\x9e\x31\x17\x79\x42\x48\x6a\x85\xe4\x4f\x56\x16\xa9\xea\x74\xc9\x8a\x00\xa9\x8d\x45\x0a\xe1\x1c\x77\xc2\x27\xc3\xed\x69\x44\xa3\x01\x25\x40\x0b\x79\xa2\xd2\x34\x4e\x54\xfc\x03\x52\xe7\x62\x9e\xaa\xd1\x6c\x72\xda\x3f\x3b\x23\xc0\xc2\x66\xa8\xe1\xa0\x0d\xa2\xce\x42\x1b\x09\x1a\x6d\x40\x28\x7a\xfe\xc5\x29\x2c\x70\x84\x9e\x11\x4f\x0a\xf7\xc7\x27\x79\x72\x7f\xdc\x1d\x42\x5a\x02\xbc\x8b\x3f\xe8\xff\xdf\xaf\xea\xb9\x2d\xb2\x58\x81\x46\x35\x4d\x18\x49\x5a\xa3\x48\x49\xc8\x93\xd0\x66\xad\x22\x57\x1e\xbd\xe5\x81\x9c\xea\x20\x75\x56\x3f\x64\x76\xf9\x82\xac\x30\x6b\x03\x08\xc1\xbe\xda\x21\xee\xd0\x7b\xdd\x1b\xff\x01\xed\x36\x56\x50\x71\x62\x41\x85\x73\x30\xd6\x63\x61\x0b\x23\xe9\x10\x6a\xa9\x3d\x06\x43\x94\x6b\x20\xa9\xb3\x11\x8d\x3a\x88\x83\x05\x1d\x48\x9d\x55\x92\x69\xb4\xfa\x70\x3e\xbb\xe2\xb3\xe9\xed\xcd\xe4\xf2\xae\xff\x50\x52\x74\x29\xc6\x6d\x30\xa9\x9e\x99\x29\xd2\x34\xb0\xb8\x9f\x12\x5d\xba\x07\xb5\x5a\x1f\x4b\x26\x5e\xe3\xd4\x16\x92\x0b\xe7\x72\x5a\xc9\xdc\xe6\x88\x9d\x3e\xca\xea\xb7\x9c\xf1\x67\x91\xe9\xe0\x65\xfe\x4f\xdd\x8b\xc2\xc4\x5e\x5b\x93\x6f\x4d\x09\x66\x05\x35\xb1\xf0\x6b\x47\xa4\xce\x28\x3b\xa9\x0a\xd5\x9c\x6a\xe9\x6c\xe6\x71\x7d\x33\xfd\xfa\x6d\x33\x6c\x55\x2d\x69\x9d\x48\x7d\x0b\x88\xe7\xdf\x27\x9f\xa6\xb7\x17\xfc\xfc\xfa\x7a\xc6\x2f\x3e\xce\xbe\xdc\x04\xe8\x47\xe5\xb9\xd4\xb9\xcf\xf4\xbc\x08\xe4\x3c\xd8\xb5\x0b\x7d\xf8\x8d\x60\x93\xd1\x61\x6d\x9d\xd6\x42\x78\x91\x82\x4e\x6c\x91\xca\x2a\x2e\xa9\xbc\x8a\x3d\x76\x99\x10\x98\x28\xa9\xc7\x2c\x1c\x97\xca\x29\x23\x95\x89\xb5\xca\xf1\xf6\x76\x88\x51\xb5\x61\xb7\xad\xfa\xfd\x57\x63\x37\xb6\x08\x9f\x54\xae\x34\xdb\x37\x6a\x2a\x8c\x31\xc6\xcb\xe1\x7e\xb1\xb9\x30\xf6\x1f\xe3\x65\x33\x6c\xfd\xda\x04\x1c\x98\x9b\xee\x56\xeb\x98\x97\xf4\x0f\x22\xb6\xff\xe8\x41\x32\x57\xd3\xcf\x97\xa3\x26\xec\x77\x82\x08\x5d\xd5\x9a\xbc\x86\x6d\xe4\x34\x6a\xc8\x29\xc6\xe3\xdf\xb3\x09\xed\x94\x09\xe7\x4e\x52\xfb\x88\xd3\x71\x7b\x40\x4a\xf2\x2b\x00\x00\xff\xff\x9c\xcd\x3f\x62\x9d\x04\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
