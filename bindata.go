// Code generated by go-bindata.
// sources:
// modules/main
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modulesMain = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5d\x4f\xdb\x30\x14\x7d\xf7\xaf\x38\x98\x50\xb5\x4c\xc5\x2d\xe2\x65\xaa\x5a\x89\x75\x48\x3c\x6c\x2a\xa2\x42\xda\x06\xc8\x32\xb1\xb3\x58\x73\x6d\x2b\x4e\x58\xf9\xc8\x7f\x9f\xe2\x84\x66\x08\x0d\xed\xcd\xb9\xf7\xe4\x7c\xdd\xfd\x3d\x56\x85\x82\xdd\x69\xcb\x94\xbd\xc7\x9d\x08\x39\x21\xc6\x09\xc9\x37\x4e\x56\x46\x0d\x47\xe4\x89\x00\xc6\xa5\xc2\x40\x78\xcf\xbd\x28\xf3\xd9\xee\x35\xa7\xc9\x94\x12\x60\x1f\x21\x57\xc6\xa4\xb9\x4a\x7f\x41\xea\x20\xee\x8c\x9a\xaf\x97\xc7\x93\x93\x13\x02\x64\xae\x40\x4b\x07\x6d\x91\x0c\x33\x6d\x25\x68\xf2\x42\x42\x31\x2e\x1f\xbc\x42\x86\x3d\x8c\xad\xd8\x28\xdc\x1c\x1e\x85\xfc\xe6\x70\x34\x83\x74\x04\xf8\x27\xff\x74\xf2\x71\x12\xf7\xc1\x55\x45\xaa\x40\x93\x56\xa6\xb1\x24\x9d\x55\xa4\x26\x64\x23\xb4\xed\x52\x04\x55\x62\xbc\x7d\x13\x27\x3e\xa4\x2e\xda\x41\xe1\xb6\x0f\x28\x2a\xdb\x15\x40\x08\x5e\xa7\x9d\xe1\x1a\xe3\xc7\x57\xf6\x6f\x31\x18\xe0\x09\x2a\xcd\x1d\xa8\xf0\x1e\xd6\x95\xc8\x5c\x65\x25\x9d\x41\x6d\x75\x89\xe9\x0c\x75\x53\x53\xa7\x34\xa7\xc9\x10\x69\xd3\xc1\x10\x52\x17\x31\x33\x4d\x9e\x3e\x9d\xae\xcf\xf9\x7a\x75\x75\xb9\x3c\xbb\x9e\xdc\xd6\x14\x23\x8a\xc5\x00\x4c\xaa\x7b\x66\x2b\x63\x1a\x19\xff\x5b\x62\x44\x3b\x53\x91\x8a\x95\x1b\xcf\xc4\x63\x6a\x5c\x25\xb9\xf0\x3e\xd0\x98\x70\x77\xc2\x86\xb9\x03\xd7\x94\xb5\xb3\xc0\xf8\xbd\x28\x74\x53\x63\xf8\x2f\x74\x56\xd9\xb4\xd4\xce\x86\x5d\x1f\x4d\x4f\x4d\x8e\x54\x94\x5d\x19\x52\x17\x94\x1d\xc5\x45\x74\xa8\xb6\xde\x15\x25\x2e\x2e\x57\xdf\xbe\xcf\x3b\xda\xb8\xad\x69\x7b\x8c\xf6\xab\x7d\x57\x9e\x4b\xe5\x95\x95\xca\xa6\x5a\x05\x3c\x3f\x23\x13\xa5\x30\xa0\x4b\x57\x19\x19\x2b\x8d\x30\xfc\x0d\xa3\xe4\x3d\xf7\x2f\x9a\xa2\xcc\xa3\x64\x7f\xd5\x79\xbf\x61\x8c\x31\x5e\xcf\x5e\x2f\xfb\x0f\xc6\x3e\x30\x5e\x93\x9d\xc9\x76\xda\xb7\xd7\x28\xf6\xe8\x83\x03\x7e\x58\xd3\x77\xcc\xef\xfe\x8b\xce\x4f\x7f\x2c\xbf\xac\xae\x3e\xf3\xd3\x8b\x8b\x35\x3f\x5f\x7d\x3d\x9b\xf7\x4d\xf6\x05\xbe\x41\xc5\x1b\x3c\x36\xa7\xe6\x34\xe9\xc5\x29\x16\x0b\xd0\xe4\x0d\x9c\x32\xe1\xfd\x91\x71\x3f\x71\xbc\x18\x4c\x49\x4d\xfe\x04\x00\x00\xff\xff\xae\xd9\xa6\x4c\xf5\x03\x00\x00")

func modulesMainBytes() ([]byte, error) {
	return bindataRead(
		_modulesMain,
		"modules/main",
	)
}

func modulesMain() (*asset, error) {
	bytes, err := modulesMainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "modules/main", size: 1013, mode: os.FileMode(436), modTime: time.Unix(1599034742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"modules/main": modulesMain,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"modules": &bintree{nil, map[string]*bintree{
		"main": &bintree{modulesMain, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

