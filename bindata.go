package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x53\xdb\x38\x14\x7d\xd7\xaf\x38\x15\x2e\x49\xe8\x04\x41\xa7\x2f\xdb\x60\x76\xd9\x00\xdb\xcc\x50\xc2\x90\x65\x66\xbb\x7c\x78\x84\xa5\x60\x4f\x8d\xac\x91\xe5\x40\x49\xfc\xdf\x77\x64\x39\x5f\x84\xce\x76\xf2\x22\xf9\xde\x9c\x7b\xce\xb9\xba\x77\xeb\x1d\x2b\x0b\xc3\xee\x53\xc5\xa4\x9a\xe0\x9e\x17\x09\x21\x59\xce\x45\xf4\x98\x8b\x32\x93\xed\x0e\x99\x12\x20\xcb\x63\x9e\x81\x6b\x1d\x69\x6e\x93\xde\xe2\x14\xd2\x60\x9f\x12\x60\x0b\x45\x22\xb3\x2c\x4e\x64\xfc\x1d\x22\x2d\xf8\x7d\x26\xc3\x51\xff\xe3\xde\xa7\x4f\x04\x18\xe7\x06\x1e\x0e\xa9\x42\xd0\x1e\xa7\x4a\x80\x06\x73\x10\x8a\xae\xfd\xa1\x25\xc6\x78\x87\xae\xe2\x8f\x12\x37\x3b\xbb\x45\x72\xb3\xd3\xe9\x41\xe4\x04\xf8\x29\xfe\xfe\xde\x6f\x7b\x75\xbc\xc8\x4b\x13\x4b\xd0\xc0\x97\x71\x94\x44\xae\x24\xa9\x08\x79\xe4\xa9\x6a\x54\x14\xd2\xa2\xfb\xbc\x21\xa7\x3e\x88\xd4\xf8\x0f\x26\x7f\xfe\x01\x53\xaa\xc6\x00\x42\xb0\xae\xb6\x87\x6b\x74\x5f\xd6\xe8\xdf\x62\x7b\x1b\x53\xc8\x38\xc9\x41\xb9\xd6\x50\xb9\xc5\x38\x2f\x95\xa0\x3d\xc8\xe7\xd4\x62\xbf\x87\xaa\x01\x12\xa9\x09\x69\xd0\x46\xec\x2c\x68\x43\xa4\xa6\x96\x4c\x83\xe9\x9f\x47\xa3\x2f\xd1\x68\x78\x75\xd9\x3f\xb9\xde\xbb\xad\x28\x3a\x14\x87\xdb\x60\x42\x4e\x98\x2a\xb3\xcc\x55\xd1\x4f\x02\x1d\xba\x06\x35\x6d\x8e\x15\xe3\x2f\x71\x96\x97\x22\xe2\x5a\x17\xb4\x96\xb9\xe8\x23\x56\xf2\x28\xf3\xdf\x0a\x16\x4d\xb8\x49\x9d\x97\xc5\x2f\x65\x8f\x4b\x15\xdb\x34\x57\xc5\xc2\x14\x67\x96\x53\x13\x73\xdb\x38\x22\x52\x43\xd9\x6e\x1d\xa8\x79\xca\x67\x9d\x1b\x8b\x8b\xcb\xe1\x3f\xdf\xe6\x64\xeb\x68\x45\x7d\x47\xfc\xcd\x21\x1e\xfd\xdb\x3f\x1b\x5e\x1d\x47\x47\x17\x17\xa3\xe8\x78\x30\xfa\xfb\xd2\x41\x3f\x48\x1b\x89\xb4\xb0\x26\xbd\x2f\x5d\xf1\xc8\xd9\xb5\x0a\xbd\xf9\x37\x82\x79\x8f\x36\x63\x4d\xb7\xc6\xdc\xf2\x0c\xb4\x9f\x97\x99\xa8\xdb\x25\xa4\x95\xb1\xc5\x6a\x25\xb8\x4a\x74\x83\xd9\x97\xe1\xd7\x93\x70\x29\xf6\x27\x44\x5c\x16\xf1\x0a\x4b\x1d\x09\xa9\xa5\x12\x52\xc5\xa9\x2c\x30\x9b\x6d\x96\xaf\xd3\xb0\x9a\x56\x17\xfe\xdf\x9e\xcc\x1d\xe5\x36\xa9\x0d\x5d\x3e\xdc\x70\x19\x61\x8c\xb1\xa8\xea\xad\x07\x97\x17\xc6\x3e\xb0\xa8\x22\xf5\x18\x1b\xc9\x05\x9c\x80\xdd\xfe\xf0\xfc\x74\xf0\x97\x1b\xd8\x6f\x47\x5f\xcf\xc0\x95\x80\x91\x5e\x29\x01\x16\x0f\x27\xb2\x79\xe4\xbf\x86\xed\x0e\x01\x9e\x92\x34\x93\x18\x9c\x8e\xc2\x56\xcb\xa3\x75\x8d\xcb\x5e\x8c\x72\x63\x16\x0d\xa6\x13\x6e\x7e\xaf\x49\xbf\x09\xf7\x21\x6c\xfb\x9c\x8a\x76\x9a\x71\xc6\xc1\xc1\x81\x1b\x1a\xef\xa9\x27\xbf\x7c\xc2\x0e\x72\x29\xaa\xa2\x9d\xda\x41\xb7\x7b\x26\xdc\x38\x1d\x1e\xee\x75\x9d\xeb\x3f\x6e\x2b\xba\x60\xe7\xe9\xcf\x79\x0b\xa9\xa3\x55\xee\x80\x9c\xb8\xbe\x05\xd3\x26\xd2\xd0\x5f\x55\xd5\x44\xde\xbf\x0f\x77\x9a\xe8\x2a\xf5\x07\x23\x75\x43\xc4\x67\xb8\xcb\xc6\xc3\x79\x73\x44\xd9\x2b\x7d\x98\xa1\x46\xeb\x4e\x70\xb7\x8a\xd8\x59\x6c\xbf\x65\x47\x07\xe7\xfd\xb3\xab\xe3\x13\xf2\x5a\xa0\xc7\x5a\xe8\xfb\x85\xe7\xb6\xbe\x60\xd7\x64\x75\x07\x26\x01\xbd\xdb\xc2\x4e\x53\xee\x33\x7d\x13\x05\x33\xf0\xa7\xef\xe8\x9e\x7e\x46\x6b\xaa\x4d\xaa\x2c\x82\xf3\xd3\xaa\x85\x19\xac\x41\xcb\xfd\x6e\x94\xbb\x15\xce\xd2\x6e\xe9\x4e\x52\xa0\xc5\xee\x02\x26\x5a\xb5\x3c\xb7\x7f\x5e\xdc\x9a\x8b\x68\xb0\xf4\x84\xe2\xf0\xf0\xf5\xd0\x3b\x3b\x29\xe3\x5a\xef\x66\xf9\x03\x3e\x1e\x6e\xef\x93\x8a\xfc\x17\x00\x00\xff\xff\x85\x5c\x82\x4e\xf6\x06\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
