package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _modules_main = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x53\xdb\x38\x14\x7d\xd7\xaf\x38\x55\x5c\xf2\xd1\x31\x82\x4e\x5f\xb6\xc1\xec\xb2\x01\xb6\x99\xa1\x84\x21\xcb\xcc\x76\xf9\xf0\x08\x4b\xc1\x9e\x1a\xd9\x23\xcb\x81\x12\xfc\xdf\x77\x64\x39\xdf\x74\xba\x93\x17\xc9\xf7\xe6\xdc\x73\xce\xbd\x57\xad\x77\xac\x2c\x34\xbb\x4f\x14\x93\x6a\x8a\x7b\x5e\xc4\x84\xa4\x19\x17\xe1\x63\x26\xca\x54\x76\xba\x64\x46\x80\x34\x8b\x78\x0a\x9e\xe7\x61\xce\x4d\xdc\x5f\x9c\x02\xea\xed\x53\x02\xb4\x50\xc4\x32\x4d\xa3\x58\x46\xdf\x21\x92\x82\xdf\xa7\x32\x18\x0f\x3e\xee\x7d\xfa\x44\x80\x49\xa6\xe1\xe0\x90\x28\x78\x9d\x49\xa2\x04\xa8\x37\x07\xa1\xf0\xcd\x8f\x5c\x62\x82\x77\xf0\x15\x7f\x94\xb8\xe9\xed\x16\xf1\x4d\xaf\xdb\x87\xc8\x08\xf0\x53\xfc\xfd\xbd\xdf\xf6\xea\x78\x91\x95\x3a\x92\xa0\x9e\x2b\x63\x29\x89\x4c\x49\x52\x11\xf2\xc8\x13\xd5\xa8\x28\xa4\x81\xff\xbc\x25\xa7\x3e\x88\x44\xbb\x0f\x3a\x7b\xfe\x01\x5d\xaa\xc6\x00\x42\xb0\xae\xb6\x8f\x6b\xf8\x2f\x6b\xf4\x6f\xb1\xb3\x83\x19\x64\x14\x67\xa0\x3c\xcf\xa1\x32\x83\x49\x56\x2a\x41\xfb\x90\xcf\x89\xc1\x7e\x1f\x55\x03\x24\x12\x1d\x50\xaf\x83\xc8\x5a\xd0\x81\x48\x74\x2d\x99\x7a\xb3\x3f\x8f\xc6\x5f\xc2\xf1\xe8\xea\x72\x70\x72\xbd\x77\x5b\x51\x74\x29\x0e\x77\xc0\x84\x9c\x32\x55\xa6\xa9\xad\x92\x3f\x09\x74\xe9\x1a\xd4\xac\x39\x56\x8c\xbf\x44\x69\x56\x8a\x90\xe7\x79\x41\x6b\x99\x8b\x3e\x62\x25\x8f\x32\xf7\xad\x60\xe1\x94\xeb\xc4\x7a\x59\xfc\xaf\xec\x49\xa9\x22\x93\x64\xaa\x58\x98\x62\xcd\xb2\x6a\x22\x6e\x1a\x47\x44\xa2\x29\xdb\xad\x03\x35\x4f\xf9\x9c\x67\xda\xe0\xe2\x72\xf4\xcf\xb7\x39\xd9\x3a\x5a\x51\xd7\x11\x77\xb3\x88\x47\xff\x0e\xce\x46\x57\xc7\xe1\xd1\xc5\xc5\x38\x3c\x1e\x8e\xff\xbe\xb4\xd0\x0f\xd2\x84\x22\x29\x8c\x4e\xee\x4b\x5b\x3c\xb4\x76\xad\x42\x6f\xff\x8d\x60\xde\xa3\xed\x58\xd3\xad\x09\x37\x3c\x05\x1d\x64\x65\x2a\xea\x76\x09\x69\x64\x64\xb0\x5a\x09\xb6\x12\xdd\x62\xf6\x65\xf4\xf5\x24\x58\x8a\xfd\x09\x11\x9b\x45\x9c\xc2\x32\x0f\x85\xcc\xa5\x12\x52\x45\x89\x2c\xf0\xfa\xba\x5d\xbe\x4e\xc3\x6a\x5a\x5d\xf8\x97\x3d\x99\x3b\xca\x4d\x5c\x1b\xba\x1c\xdc\x60\x19\x61\x8c\xb1\xb0\xea\xaf\x07\x97\x17\xc6\x3e\xb0\xb0\x22\xf5\x1a\x6b\xc9\x05\xac\x80\xdd\xc1\xe8\xfc\x74\xf8\x97\x5d\xd8\x6f\x47\x5f\xcf\xc0\x95\x80\x96\x4e\x29\x01\x16\x83\x13\x9a\x2c\x74\x5f\x83\x4e\x97\x00\x4f\x71\x92\x4a\x0c\x4f\xc7\x41\xbb\xed\xd0\x7c\x6d\xb3\x17\xab\xdc\x98\x45\xbd\xd9\x94\xeb\xdf\x6b\xd2\x6f\xc2\x7d\x08\x3a\x2e\xa7\xa2\xdd\x66\x9d\x71\x70\x70\x60\x97\xc6\x79\xea\xc8\x2f\x47\xd8\x42\x2e\x45\xb5\x5a\xbd\xb0\xa2\xdd\xda\x45\xfb\xfe\x4c\xb9\xb6\x5a\x1c\xe4\x66\xad\xeb\x3f\x6e\x2b\xba\x60\xe8\x24\xcc\xb9\x0b\x99\x87\xab\xfc\x01\x39\xb5\xbd\xf3\x66\x4d\xa4\x91\xb0\xaa\xac\x89\xbc\x7f\x1f\xf4\x9a\xe8\x2a\xfd\x07\x2d\xf3\x86\x88\xcb\xb0\x97\xad\xe1\x79\x73\x4d\xd9\x1b\x1a\xf1\x8a\x1a\xd1\x9f\xe2\x6e\x15\xb5\xbb\x78\x05\x97\x9d\x1d\x9e\x0f\xce\xae\x8e\x4f\xc8\xa6\x48\x87\xb7\xd0\xf8\x8b\xb1\x63\x9b\xef\xec\x9a\x32\x7f\xa8\x63\xd0\xbb\x16\x7a\x4d\xb5\xcf\x96\x22\x7f\xfa\x0e\xff\xf4\x33\xda\xb3\x5c\x27\xca\xc0\x3b\x3f\xad\xda\x78\x85\xd1\x68\xdb\xdf\x8d\xb2\xb7\xc2\x1a\xe8\x97\xf6\x24\x05\xda\xec\xce\x63\xa2\xed\x9a\xc8\x5f\xec\xb3\x16\x52\x6f\xa9\x9f\xe2\xf0\x70\x73\xc9\xad\x75\x94\xf1\x3c\xdf\x4d\xb3\x07\x7c\x3c\xdc\xd9\x27\x15\xc8\x7f\x01\x00\x00\xff\xff\xab\x91\x18\xac\xe7\x06\x00\x00")

func modules_main() ([]byte, error) {
	return bindata_read(
		_modules_main,
		"modules/main",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"modules/main": modules_main,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"modules": &_bintree_t{nil, map[string]*_bintree_t{
		"main": &_bintree_t{modules_main, map[string]*_bintree_t{
		}},
	}},
}}
