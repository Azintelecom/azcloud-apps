// Code generated by go-bindata.
// sources:
// modules/main
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _modulesMain = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x5b\x4f\xdb\x3c\x18\xbe\xf7\xaf\x78\x30\xa1\x6a\xf9\x54\xdc\x22\x6e\x3e\x45\xa9\xc4\x3a\x24\x2e\x36\x15\x51\x21\x6d\x03\x64\x99\xd8\x59\xac\xb9\xb6\x95\x03\x2b\x87\xfc\xf7\x29\x4e\x68\x86\xd0\x7a\xf7\xc6\xef\x93\xe7\xf4\x1e\x1e\xb0\xba\x2c\xd8\x83\xb6\x4c\xd9\x47\x3c\x88\x32\x27\xc4\x38\x21\xf9\xc6\xc9\xda\xa8\xf1\x84\xbc\x10\xc0\xb8\x54\x18\x08\xef\xb9\x17\x55\x1e\xef\xa6\x84\x46\x73\x4a\x80\x43\x94\xb9\x32\x26\xcd\x55\xfa\x0b\x52\x97\xe2\xc1\xa8\x64\xbd\x3c\x9d\x9d\x9d\x11\x20\x73\x05\x3a\x3a\x68\x8b\x68\x9c\x69\x2b\x41\xa3\x37\x12\x8a\x69\xf5\xe4\x15\x32\x1c\x60\x6a\xc5\x46\xe1\xee\xf8\xa4\xcc\xef\x8e\x27\x31\xa4\x23\xc0\x3f\xf9\xe7\xb3\xff\x67\x61\x5f\xba\xba\x48\x15\x68\xd4\xc9\xb4\x96\xa4\xb3\x8a\x34\x84\x6c\x84\xb6\x7d\x8a\x52\x55\x98\x6e\x3f\xc4\x09\x83\xd4\x45\xf7\x50\xb8\xed\x13\x8a\xda\xf6\x05\x10\x82\xf7\x69\x63\xdc\x62\xfa\xfc\xce\xfe\x3d\x46\x23\xbc\x40\xa5\xb9\x03\x15\xde\xc3\xba\x0a\x99\xab\xad\xa4\x31\xd4\x56\x57\x98\xc7\x68\xda\x9a\x7a\xa5\x84\x46\x63\xa4\x6d\x07\x63\x48\x5d\x84\xcc\x34\x7a\xf9\x74\xbe\xbe\xe4\xeb\xd5\xcd\xf5\xf2\xe2\x76\x76\xdf\x50\x4c\x28\x16\x23\x30\xa9\x1e\x99\xad\x8d\x69\x65\xfc\x6f\x89\x09\xed\x4d\x05\x2a\x56\x6d\x3c\x13\xcf\xa9\x71\xb5\xe4\xc2\xfb\x92\x86\x84\xbb\x13\xb6\xcc\x3d\xb8\xa1\x8c\x3f\x8a\x42\xb7\xf5\x95\x7b\x51\x59\x6d\xd3\x4a\x3b\x5b\xee\xf2\xb7\xbd\xb4\xbe\x53\x51\xf5\xe1\xa5\x2e\x28\x3b\x09\x8b\xe0\x48\x6d\xbd\x2b\x2a\x5c\x5d\xaf\xbe\x7d\x4f\x7a\xba\xb0\x6d\x68\x57\x7e\xf7\xd5\xcd\xb5\xe7\x52\x79\x65\xa5\xb2\xa9\x56\x25\x5e\x5f\x91\x89\x4a\x18\xd0\xa5\xab\x8d\x0c\x15\x06\x18\xfe\x86\x51\xb2\xcf\xf5\x9b\xa6\xa8\xf2\x20\x39\x5c\x31\x19\x36\x8c\x31\xc6\x9b\xf8\xfd\x72\xf8\x60\xec\x3f\xc6\x1b\xb2\x33\xd9\xbd\x0e\xad\xb5\x8a\x03\xfa\xe8\x88\x1f\x37\x74\x8f\xf9\xdd\x7f\xc1\xf9\xf9\x8f\xe5\x97\xd5\xcd\x67\x7e\x7e\x75\xb5\xe6\x97\xab\xaf\x17\xc9\xd0\xe4\x50\xe0\x07\x54\xb8\xc1\x73\x7b\x5a\x4e\xa3\x41\x9c\x62\xb1\x00\x8d\x3e\xc0\x29\x13\xde\x9f\x18\xf7\x13\xa7\x8b\xd1\x9c\x34\xe4\x4f\x00\x00\x00\xff\xff\x3a\xc5\xe3\x32\xe5\x03\x00\x00")

func modulesMainBytes() ([]byte, error) {
	return bindataRead(
		_modulesMain,
		"modules/main",
	)
}

func modulesMain() (*asset, error) {
	bytes, err := modulesMainBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "modules/main", size: 997, mode: os.FileMode(436), modTime: time.Unix(1599033281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"modules/main": modulesMain,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"modules": &bintree{nil, map[string]*bintree{
		"main": &bintree{modulesMain, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

