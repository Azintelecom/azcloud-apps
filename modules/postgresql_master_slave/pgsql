#!/usr/bin/env bash

_install_and_setup_pgsql()
{
  local play_id; play_id="$(get_play_id)"

  yum -y install postgresql-server postgresql-contrib
  postgresql-setup initdb || fatal "Could not initab on postgresql"
  systemctl enable --now postgresql || fatal "Could not enable/start postgresql"

  su - postgres -c "psql -c \"CREATE USER replication REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD '$play_id'; \""
}

_wait_for_master()
{
  local master_address; master_address="$1"; shift
  local exitcode

  while true; do
    nc -v -w1 "$master_address" 5432 >& /dev/null
    exitcode="$?"
    if [ $exitcode = 0 ]; then
      return $exitcode
    fi
    sleep 5
    ((attempts++))
    [ "$attempts" -gt 24 ] && { exitcode=1; return $exitcode; }
  done
}

_setup_pgsql_master()
{
  local my_address; my_address="$(get_my_address)"
  local pgsql_home; pgsql_home=${AZCLOUD_APPS_STORAGE}
  local pgsql_data; pgsql_data="$pgsql_home/data"
  local pgsql_archive; pgsql_archive="$pgsql_home/archive"

  systemctl stop postgresql || fatal "Could not stop postgresql.service"

  su - postgres -c "cp $pgsql_data/{postgresql.conf,postgresql.conf.orig}"

  cat <<EOF >> "$pgsql_data"/postgresql.conf
# added by azcloud apps
listen_addresses = 'localhost,$my_address'
wal_level = hot_standby
synchronous_commit = local
archive_mode = on
archive_command = 'cp %p $pgsql_archive/%f'
max_wal_senders = 2
wal_keep_segments = 10
synchronous_standby_names = 'pgslave01'
EOF
  mkdir -p "$pgsql_archive"
  chmod 700 "$pgsql_archive"
  chown -R postgres:postgres "$pgsql_archive"

  local slave_address; slave_address="$(_get_slave_address)"
  local master_address; master_address="$(_get_master_address)"
  su - postgres -c "cp $pgsql_data/{pg_hba.conf,pg_hba.conf.orig}"

  cat <<EOF >> "$pgsql_data"/pg_hba.conf
host    replication     replication     127.0.0.1/32   trust
host    replication     replication     $master_address/32   trust
host    replication     replication     $slave_address/32   trust
EOF
  systemctl start postgresql || fatal "Could not start postgresql.service"
}

_setup_pgsql_slave()
{
  local play_id; play_id="$(get_play_id)"
  local pgsql_home; pgsql_home="/var/lib/pgsql"
  local pgsql_data; pgsql_data="$pgsql_home/data"
  local my_address; my_address="$(get_my_address)"
  local master_address; master_address="$(_get_master_address)"
  local slave_address; slave_address="$(_get_slave_address)"

  systemctl stop postgresql || fatal "Could not stop postgresql.service"

  mv "$pgsql_home"/{data,data_original}
  mkdir -p "$pgsql_data"
  chmod 700 "$pgsql_data"
  chown -R postgres:postgres "$pgsql_data"

  _wait_for_master "$master_address" || fatal "Time wait for master expired, master: $master_address"

  su - postgres -c "pg_basebackup -h $master_address -U replication -D $pgsql_data -P --xlog" \
    || fatal "Could not sync replication data"

  cat <<EOF >> $pgsql_data/postgresql.conf
hot_standby = on
EOF
  # change address to slave
  sed -i "/listen_address/s/=.*/= 'localhost,$my_address'/g" "$pgsql_data"/postgresql.conf

  cat <<EOF >> $pgsql_data/recovery.conf
standby_mode = 'on'
primary_conninfo = 'host=$master_address port=5432 user=replication password=$play_id application_name=pgslave01'
trigger_file = '/tmp/postgresql.trigger.5432'
EOF
  systemctl start postgresql || fatal "Could not start postgresql.service"
  cat <<EOF
+-------------------------------------+
  Cluster setup finished!
  Cluster name: $(get_play_id)
  Cluster nodes: $(_get_cluster_size)
  Date: $(date)
+-------------------------------------+
EOF
}
